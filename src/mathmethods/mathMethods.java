/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mathmethods;

import java.io.*;
import java.awt.Font;
import java.awt.FontFormatException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Paul Duan
 */
public class mathMethods extends javax.swing.JFrame {

    /**
     * Creates new form mathMethods
     */
    public mathMethods() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        inTextField = new javax.swing.JTextField();
        outTextField = new javax.swing.JTextField();
        plusMode = new javax.swing.JRadioButton();
        minusMode = new javax.swing.JRadioButton();
        timesMode = new javax.swing.JRadioButton();
        obelusMode = new javax.swing.JRadioButton();
        buttonPanel = new javax.swing.JPanel();
        btnSeven = new javax.swing.JButton();
        btnEight = new javax.swing.JButton();
        btnNine = new javax.swing.JButton();
        btnPlus = new javax.swing.JButton();
        btnFive = new javax.swing.JButton();
        btnFour = new javax.swing.JButton();
        btnSix = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btnOne = new javax.swing.JButton();
        btnTwo = new javax.swing.JButton();
        btnThree = new javax.swing.JButton();
        btnTimes = new javax.swing.JButton();
        btnZero = new javax.swing.JButton();
        btnDot = new javax.swing.JButton();
        btnEquals = new javax.swing.JButton();
        btnObelus = new javax.swing.JButton();
        advFunBtn = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnAllC = new javax.swing.JButton();
        advancedPanel = new javax.swing.JPanel();
        advLabel = new javax.swing.JLabel();
        absLabel = new javax.swing.JLabel();
        sqrtLabel = new javax.swing.JLabel();
        cbrtLabel = new javax.swing.JLabel();
        powerLabel = new javax.swing.JLabel();
        cosLabel = new javax.swing.JLabel();
        sinLabel = new javax.swing.JLabel();
        tanLabel = new javax.swing.JLabel();
        inAbs = new javax.swing.JTextField();
        leftAbs = new javax.swing.JLabel();
        rightAbs = new javax.swing.JLabel();
        absEquals = new javax.swing.JButton();
        sqrt = new javax.swing.JLabel();
        cbrt = new javax.swing.JLabel();
        inSqrt = new javax.swing.JTextField();
        inCbrt = new javax.swing.JTextField();
        sqrtEquals = new javax.swing.JButton();
        cbrtEquals = new javax.swing.JButton();
        powerEquals = new javax.swing.JButton();
        power = new javax.swing.JLabel();
        inBase = new javax.swing.JTextField();
        inExponent = new javax.swing.JTextField();
        sin = new javax.swing.JLabel();
        cos = new javax.swing.JLabel();
        tan = new javax.swing.JLabel();
        inSin = new javax.swing.JTextField();
        inCos = new javax.swing.JTextField();
        inTan = new javax.swing.JTextField();
        sinEquals = new javax.swing.JButton();
        tanEquals = new javax.swing.JButton();
        cosEquals = new javax.swing.JButton();
        simpleCalc = new javax.swing.JButton();
        outAbs = new javax.swing.JTextField();
        outSqrt = new javax.swing.JTextField();
        outCbrt = new javax.swing.JTextField();
        outPower = new javax.swing.JTextField();
        outSin = new javax.swing.JTextField();
        outTan = new javax.swing.JTextField();
        outCos = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Math Methods");
        setBackground(new java.awt.Color(0, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(375, 605));
        setResizable(false);
        getContentPane().setLayout(null);

        mainPanel.setBackground(new java.awt.Color(175, 175, 252));
        mainPanel.setForeground(new java.awt.Color(240, 240, 240));
        mainPanel.setPreferredSize(new java.awt.Dimension(372, 565));

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Simple Calculator");

        InputStream is = getClass().getResourceAsStream("/font/Aldrich-Regular.ttf");
        try {
            Font lcdFont = Font.createFont(Font.TRUETYPE_FONT, is);
            java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(lcdFont);
        } catch (FontFormatException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        inTextField.getCaret().setVisible(false);
        inTextField.setDocument(doc);
        inTextField.setFont(new Font("Aldrich",Font.PLAIN,29));
        inTextField.setMargin(new java.awt.Insets(2, 2, 0, 2));
        inTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inTextFieldActionPerformed(evt);
            }
        });

        outTextField.setEditable(false);
        outTextField.setFont(new Font("Aldrich",Font.PLAIN,28));
        outTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        outTextField.setText("0.0");
        outTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        outTextField.setFocusable(false);
        outTextField.setMargin(new java.awt.Insets(2, 2, 0, 2));

        plusMode.setBackground(new java.awt.Color(51, 153, 255));
        modeButtonGroup.add(plusMode);
        plusMode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        plusMode.setForeground(new java.awt.Color(255, 255, 255));
        plusMode.setSelected(true);
        plusMode.setText("Plus Mode");
        plusMode.setFocusPainted(false);
        plusMode.setFocusable(false);
        plusMode.setOpaque(false);
        plusMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusModeActionPerformed(evt);
            }
        });

        minusMode.setBackground(new java.awt.Color(51, 153, 255));
        modeButtonGroup.add(minusMode);
        minusMode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        minusMode.setForeground(new java.awt.Color(255, 255, 255));
        minusMode.setText("Minus Mode");
        minusMode.setFocusPainted(false);
        minusMode.setFocusable(false);
        minusMode.setOpaque(false);
        minusMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusModeActionPerformed(evt);
            }
        });

        timesMode.setBackground(new java.awt.Color(51, 153, 255));
        modeButtonGroup.add(timesMode);
        timesMode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        timesMode.setForeground(new java.awt.Color(255, 255, 255));
        timesMode.setText("Times Mode");
        timesMode.setFocusPainted(false);
        timesMode.setFocusable(false);
        timesMode.setOpaque(false);
        timesMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesModeActionPerformed(evt);
            }
        });

        obelusMode.setBackground(new java.awt.Color(51, 153, 255));
        modeButtonGroup.add(obelusMode);
        obelusMode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        obelusMode.setForeground(new java.awt.Color(255, 255, 255));
        obelusMode.setText("Obelus Mode");
        obelusMode.setFocusPainted(false);
        obelusMode.setFocusable(false);
        obelusMode.setOpaque(false);
        obelusMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obelusModeActionPerformed(evt);
            }
        });

        buttonPanel.setBackground(new java.awt.Color(51, 153, 255));
        buttonPanel.setOpaque(false);
        buttonPanel.setLayout(new java.awt.GridLayout(4, 4, 20, 30));

        btnSeven.setBackground(new java.awt.Color(255, 255, 255));
        btnSeven.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnSeven.setForeground(new java.awt.Color(0, 153, 255));
        btnSeven.setText("7");
        btnSeven.setFocusPainted(false);
        btnSeven.setFocusable(false);
        btnSeven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSevenActionPerformed(evt);
            }
        });
        buttonPanel.add(btnSeven);

        btnEight.setBackground(new java.awt.Color(255, 255, 255));
        btnEight.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnEight.setForeground(new java.awt.Color(0, 153, 255));
        btnEight.setText("8");
        btnEight.setFocusPainted(false);
        btnEight.setFocusable(false);
        btnEight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEightActionPerformed(evt);
            }
        });
        buttonPanel.add(btnEight);

        btnNine.setBackground(new java.awt.Color(255, 255, 255));
        btnNine.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnNine.setForeground(new java.awt.Color(0, 153, 255));
        btnNine.setText("9");
        btnNine.setFocusPainted(false);
        btnNine.setFocusable(false);
        btnNine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNineActionPerformed(evt);
            }
        });
        buttonPanel.add(btnNine);

        btnPlus.setBackground(new java.awt.Color(255, 255, 255));
        btnPlus.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnPlus.setForeground(new java.awt.Color(0, 153, 255));
        btnPlus.setText("+");
        btnPlus.setFocusPainted(false);
        btnPlus.setFocusable(false);
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });
        buttonPanel.add(btnPlus);

        btnFive.setBackground(new java.awt.Color(255, 255, 255));
        btnFive.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnFive.setForeground(new java.awt.Color(0, 153, 255));
        btnFive.setText("5");
        btnFive.setFocusPainted(false);
        btnFive.setFocusable(false);
        btnFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiveActionPerformed(evt);
            }
        });
        buttonPanel.add(btnFive);

        btnFour.setBackground(new java.awt.Color(255, 255, 255));
        btnFour.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnFour.setForeground(new java.awt.Color(0, 153, 255));
        btnFour.setText("4");
        btnFour.setFocusPainted(false);
        btnFour.setFocusable(false);
        btnFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFourActionPerformed(evt);
            }
        });
        buttonPanel.add(btnFour);

        btnSix.setBackground(new java.awt.Color(255, 255, 255));
        btnSix.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnSix.setForeground(new java.awt.Color(0, 153, 255));
        btnSix.setText("6");
        btnSix.setFocusPainted(false);
        btnSix.setFocusable(false);
        btnSix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSixActionPerformed(evt);
            }
        });
        buttonPanel.add(btnSix);

        btnMinus.setBackground(new java.awt.Color(255, 255, 255));
        btnMinus.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnMinus.setForeground(new java.awt.Color(0, 153, 255));
        btnMinus.setText("-");
        btnMinus.setFocusPainted(false);
        btnMinus.setFocusable(false);
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });
        buttonPanel.add(btnMinus);

        btnOne.setBackground(new java.awt.Color(255, 255, 255));
        btnOne.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnOne.setForeground(new java.awt.Color(0, 153, 255));
        btnOne.setText("1");
        btnOne.setFocusPainted(false);
        btnOne.setFocusable(false);
        btnOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOneActionPerformed(evt);
            }
        });
        buttonPanel.add(btnOne);

        btnTwo.setBackground(new java.awt.Color(255, 255, 255));
        btnTwo.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnTwo.setForeground(new java.awt.Color(0, 153, 255));
        btnTwo.setText("2");
        btnTwo.setFocusPainted(false);
        btnTwo.setFocusable(false);
        btnTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTwoActionPerformed(evt);
            }
        });
        buttonPanel.add(btnTwo);

        btnThree.setBackground(new java.awt.Color(255, 255, 255));
        btnThree.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnThree.setForeground(new java.awt.Color(0, 153, 255));
        btnThree.setText("3");
        btnThree.setFocusPainted(false);
        btnThree.setFocusable(false);
        btnThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThreeActionPerformed(evt);
            }
        });
        buttonPanel.add(btnThree);

        btnTimes.setBackground(new java.awt.Color(255, 255, 255));
        btnTimes.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnTimes.setForeground(new java.awt.Color(0, 153, 255));
        btnTimes.setText("×");
        btnTimes.setFocusPainted(false);
        btnTimes.setFocusable(false);
        btnTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimesActionPerformed(evt);
            }
        });
        buttonPanel.add(btnTimes);

        btnZero.setBackground(new java.awt.Color(255, 255, 255));
        btnZero.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnZero.setForeground(new java.awt.Color(0, 153, 255));
        btnZero.setText("0");
        btnZero.setFocusPainted(false);
        btnZero.setFocusable(false);
        btnZero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZeroActionPerformed(evt);
            }
        });
        buttonPanel.add(btnZero);

        btnDot.setBackground(new java.awt.Color(255, 255, 255));
        btnDot.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnDot.setForeground(new java.awt.Color(0, 153, 255));
        btnDot.setText(".");
        btnDot.setFocusPainted(false);
        btnDot.setFocusable(false);
        btnDot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDotActionPerformed(evt);
            }
        });
        buttonPanel.add(btnDot);

        btnEquals.setBackground(new java.awt.Color(255, 255, 255));
        btnEquals.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnEquals.setForeground(new java.awt.Color(0, 153, 255));
        btnEquals.setText("=");
        btnEquals.setFocusPainted(false);
        btnEquals.setFocusable(false);
        btnEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqualsActionPerformed(evt);
            }
        });
        buttonPanel.add(btnEquals);

        btnObelus.setBackground(new java.awt.Color(255, 255, 255));
        btnObelus.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        btnObelus.setForeground(new java.awt.Color(0, 153, 255));
        btnObelus.setText("÷");
        btnObelus.setFocusPainted(false);
        btnObelus.setFocusable(false);
        btnObelus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObelusActionPerformed(evt);
            }
        });
        buttonPanel.add(btnObelus);

        advFunBtn.setBackground(new java.awt.Color(255, 255, 255));
        advFunBtn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        advFunBtn.setText("Advanced Function");
        advFunBtn.setFocusPainted(false);
        advFunBtn.setFocusable(false);
        advFunBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advFunBtnActionPerformed(evt);
            }
        });

        btnDel.setBackground(new java.awt.Color(255, 255, 255));
        btnDel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnDel.setForeground(new java.awt.Color(0, 176, 60));
        btnDel.setText("DEL");
        btnDel.setFocusable(false);
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnAllC.setBackground(new java.awt.Color(255, 255, 255));
        btnAllC.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnAllC.setForeground(new java.awt.Color(0, 176, 60));
        btnAllC.setText("AC");
        btnAllC.setFocusable(false);
        btnAllC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(inTextField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(outTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(buttonPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(btnDel)
                                .addGap(18, 18, 18)
                                .addComponent(btnAllC, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(plusMode)
                                    .addComponent(minusMode))
                                .addGap(6, 6, 6)
                                .addComponent(advFunBtn)
                                .addGap(6, 6, 6)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(timesMode)
                                    .addComponent(obelusMode))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGap(6, 6, 6)
                .addComponent(inTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(outTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(plusMode)
                        .addGap(0, 0, 0)
                        .addComponent(minusMode))
                    .addComponent(advFunBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(timesMode)
                        .addGap(0, 0, 0)
                        .addComponent(obelusMode)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAllC)
                    .addComponent(btnDel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(mainPanel);
        mainPanel.setBounds(0, 0, 400, 584);

        advancedPanel.setVisible(false);
        advancedPanel.setBackground(new java.awt.Color(175, 175, 252));
        advancedPanel.setForeground(new java.awt.Color(240, 240, 240));
        advancedPanel.setPreferredSize(new java.awt.Dimension(372, 575));

        advLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        advLabel.setForeground(new java.awt.Color(255, 255, 255));
        advLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        advLabel.setText("Advanced Function");

        absLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        absLabel.setForeground(new java.awt.Color(255, 255, 255));
        absLabel.setText("Absolute Value:");

        sqrtLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sqrtLabel.setForeground(new java.awt.Color(255, 255, 255));
        sqrtLabel.setText("Square Root:");

        cbrtLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cbrtLabel.setForeground(new java.awt.Color(255, 255, 255));
        cbrtLabel.setText("Cube Root:");

        powerLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        powerLabel.setForeground(new java.awt.Color(255, 255, 255));
        powerLabel.setText("Power:");

        cosLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cosLabel.setForeground(new java.awt.Color(255, 255, 255));
        cosLabel.setText("Cosine(Degree):");

        sinLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sinLabel.setForeground(new java.awt.Color(255, 255, 255));
        sinLabel.setText("Sine(Degree):");

        tanLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tanLabel.setForeground(new java.awt.Color(255, 255, 255));
        tanLabel.setText("Tangent(Degree):");

        inAbs.setDocument(new myPlainDocument());
        inAbs.setFont(new Font("Aldrich",Font.PLAIN,20));
        inAbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inAbsActionPerformed(evt);
            }
        });

        leftAbs.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        leftAbs.setForeground(new java.awt.Color(255, 255, 255));
        leftAbs.setText("|");

        rightAbs.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        rightAbs.setForeground(new java.awt.Color(255, 255, 255));
        rightAbs.setText("|");

        absEquals.setBackground(new java.awt.Color(255, 255, 255));
        absEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        absEquals.setForeground(new java.awt.Color(0, 153, 255));
        absEquals.setText("=");
        absEquals.setFocusable(false);
        absEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absEqualsActionPerformed(evt);
            }
        });

        sqrt.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        sqrt.setForeground(new java.awt.Color(255, 255, 255));
        sqrt.setText("√");

        cbrt.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        cbrt.setForeground(new java.awt.Color(255, 255, 255));
        cbrt.setText("∛");

        inSqrt.setDocument(new myPlainDocument());
        inSqrt.setFont(new Font("Aldrich",Font.PLAIN,20));
        inSqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inSqrtActionPerformed(evt);
            }
        });

        inCbrt.setDocument(new myPlainDocument());
        inCbrt.setFont(new Font("Aldrich",Font.PLAIN,20));
        inCbrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inCbrtActionPerformed(evt);
            }
        });

        sqrtEquals.setBackground(new java.awt.Color(255, 255, 255));
        sqrtEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        sqrtEquals.setForeground(new java.awt.Color(0, 153, 255));
        sqrtEquals.setText("=");
        sqrtEquals.setFocusable(false);
        sqrtEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtEqualsActionPerformed(evt);
            }
        });

        cbrtEquals.setBackground(new java.awt.Color(255, 255, 255));
        cbrtEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        cbrtEquals.setForeground(new java.awt.Color(0, 153, 255));
        cbrtEquals.setText("=");
        cbrtEquals.setFocusable(false);
        cbrtEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbrtEqualsActionPerformed(evt);
            }
        });

        powerEquals.setBackground(new java.awt.Color(255, 255, 255));
        powerEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        powerEquals.setForeground(new java.awt.Color(0, 153, 255));
        powerEquals.setText("=");
        powerEquals.setFocusable(false);
        powerEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerEqualsActionPerformed(evt);
            }
        });

        power.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        power.setForeground(new java.awt.Color(255, 255, 255));
        power.setText("^");

        inBase.setDocument(new myPlainDocument());
        inBase.setFont(new Font("Aldrich",Font.PLAIN,20));
        inBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inBaseActionPerformed(evt);
            }
        });

        inExponent.setDocument(new myPlainDocument());
        inExponent.setFont(new Font("Aldrich",Font.PLAIN,20));
        inExponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inExponentActionPerformed(evt);
            }
        });

        sin.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        sin.setForeground(new java.awt.Color(255, 255, 255));
        sin.setText("Sin");

        cos.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        cos.setForeground(new java.awt.Color(255, 255, 255));
        cos.setText("Cos");

        tan.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        tan.setForeground(new java.awt.Color(255, 255, 255));
        tan.setText("Tan");

        inSin.setDocument(new myPlainDocument());
        inSin.setFont(new Font("Aldrich",Font.PLAIN,20));
        inSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inSinActionPerformed(evt);
            }
        });

        inCos.setDocument(new myPlainDocument());
        inCos.setFont(new Font("Aldrich",Font.PLAIN,20));
        inCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inCosActionPerformed(evt);
            }
        });

        inTan.setDocument(new myPlainDocument());
        inTan.setFont(new Font("Aldrich",Font.PLAIN,20));
        inTan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inTanActionPerformed(evt);
            }
        });

        sinEquals.setBackground(new java.awt.Color(255, 255, 255));
        sinEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        sinEquals.setForeground(new java.awt.Color(0, 153, 255));
        sinEquals.setText("=");
        sinEquals.setFocusable(false);
        sinEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinEqualsActionPerformed(evt);
            }
        });

        tanEquals.setBackground(new java.awt.Color(255, 255, 255));
        tanEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        tanEquals.setForeground(new java.awt.Color(0, 153, 255));
        tanEquals.setText("=");
        tanEquals.setFocusable(false);
        tanEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanEqualsActionPerformed(evt);
            }
        });

        cosEquals.setBackground(new java.awt.Color(255, 255, 255));
        cosEquals.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        cosEquals.setForeground(new java.awt.Color(0, 153, 255));
        cosEquals.setText("=");
        cosEquals.setFocusable(false);
        cosEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosEqualsActionPerformed(evt);
            }
        });

        simpleCalc.setBackground(new java.awt.Color(255, 255, 255));
        simpleCalc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        simpleCalc.setText("Calculator");
        simpleCalc.setFocusPainted(false);
        simpleCalc.setFocusable(false);
        simpleCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleCalcActionPerformed(evt);
            }
        });

        outAbs.setEditable(false);
        outAbs.setFont(new Font("Aldrich",Font.PLAIN,20));

        outSqrt.setEditable(false);
        outSqrt.setFont(new Font("Aldrich",Font.PLAIN,20));

        outCbrt.setEditable(false);
        outCbrt.setFont(new Font("Aldrich",Font.PLAIN,20));

        outPower.setEditable(false);
        outPower.setFont(new Font("Aldrich",Font.PLAIN,20));

        outSin.setEditable(false);
        outSin.setFont(new Font("Aldrich",Font.PLAIN,20));

        outTan.setEditable(false);
        outTan.setFont(new Font("Aldrich",Font.PLAIN,20));

        outCos.setEditable(false);
        outCos.setFont(new Font("Aldrich",Font.PLAIN,20));

        javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);
        advancedPanel.setLayout(advancedPanelLayout);
        advancedPanelLayout.setHorizontalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(advLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(advancedPanelLayout.createSequentialGroup()
                        .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(advancedPanelLayout.createSequentialGroup()
                                    .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, advancedPanelLayout.createSequentialGroup()
                                            .addComponent(inBase, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, 0)
                                            .addComponent(power)
                                            .addGap(0, 0, 0)
                                            .addComponent(inExponent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, advancedPanelLayout.createSequentialGroup()
                                            .addComponent(cbrt)
                                            .addGap(0, 0, 0)
                                            .addComponent(inCbrt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, advancedPanelLayout.createSequentialGroup()
                                            .addComponent(cos)
                                            .addGap(0, 0, 0)
                                            .addComponent(inCos, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(advancedPanelLayout.createSequentialGroup()
                                            .addGap(36, 36, 36)
                                            .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(sinEquals)
                                                .addComponent(powerEquals)
                                                .addComponent(tanEquals)
                                                .addComponent(cosEquals)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, advancedPanelLayout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbrtEquals))))
                                .addGroup(advancedPanelLayout.createSequentialGroup()
                                    .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, advancedPanelLayout.createSequentialGroup()
                                            .addComponent(sqrt)
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addComponent(inSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(sqrtLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sqrtEquals))
                                .addGroup(advancedPanelLayout.createSequentialGroup()
                                    .addComponent(leftAbs)
                                    .addGap(0, 0, 0)
                                    .addComponent(inAbs, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, 0)
                                    .addComponent(rightAbs)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(absEquals)))
                            .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, advancedPanelLayout.createSequentialGroup()
                                    .addComponent(sin)
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(inSin, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(cosLabel, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(cbrtLabel)
                            .addComponent(absLabel)
                            .addComponent(sinLabel)
                            .addComponent(powerLabel)
                            .addComponent(tanLabel)
                            .addGroup(advancedPanelLayout.createSequentialGroup()
                                .addComponent(tan)
                                .addGap(0, 0, 0)
                                .addComponent(inTan, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outSqrt, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(outCbrt)
                            .addComponent(outPower)
                            .addComponent(outSin, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(outCos)
                            .addComponent(outTan)
                            .addComponent(outAbs))))
                .addGap(23, 23, 23))
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(simpleCalc)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        advancedPanelLayout.setVerticalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addComponent(advLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(absLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leftAbs)
                    .addComponent(inAbs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rightAbs)
                    .addComponent(absEquals)
                    .addComponent(outAbs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sqrtLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sqrt)
                    .addComponent(inSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sqrtEquals)
                    .addComponent(outSqrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbrtLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbrt)
                    .addComponent(inCbrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbrtEquals)
                    .addComponent(outCbrt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(powerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(powerEquals)
                    .addComponent(power)
                    .addComponent(inBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inExponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sinLabel)
                .addGap(5, 5, 5)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sin)
                    .addComponent(inSin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sinEquals)
                    .addComponent(outSin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cos)
                    .addComponent(inCos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cosEquals)
                    .addComponent(outCos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tanLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tan)
                    .addComponent(inTan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tanEquals)
                    .addComponent(outTan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(simpleCalc, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        getContentPane().add(advancedPanel);
        advancedPanel.setBounds(0, 0, 370, 575);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //button "2"'s action
    private void btnTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTwoActionPerformed
        // TODO add your handling code here:
        btnPerfomed("2");
    }//GEN-LAST:event_btnTwoActionPerformed

    //button "5"'s action
    private void btnFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiveActionPerformed
        // TODO add your handling code here:
        btnPerfomed("5");
    }//GEN-LAST:event_btnFiveActionPerformed

    //button "8"'s action
    private void btnEightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEightActionPerformed
        // TODO add your handling code here:
        btnPerfomed("8");
    }//GEN-LAST:event_btnEightActionPerformed

    //button "*"'s action
    private void btnTimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimesActionPerformed
        // TODO add your handling code here:
        btnPerfomed("*");
    }//GEN-LAST:event_btnTimesActionPerformed

    //button "7"'s action
    private void btnSevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSevenActionPerformed
        // TODO add your handling code here:
        btnPerfomed("7");
    }//GEN-LAST:event_btnSevenActionPerformed

    //button "9"'s action
    private void btnNineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNineActionPerformed
        // TODO add your handling code here:
        btnPerfomed("9");
    }//GEN-LAST:event_btnNineActionPerformed

    //button "+"'s action
    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        // TODO add your handling code here:
        btnPerfomed("+");
    }//GEN-LAST:event_btnPlusActionPerformed

    //button "-"'s action
    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        // TODO add your handling code here:
        btnPerfomed("-");
    }//GEN-LAST:event_btnMinusActionPerformed

    //button "4"'s action
    private void btnFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFourActionPerformed
        // TODO add your handling code here:
        btnPerfomed("4");
    }//GEN-LAST:event_btnFourActionPerformed

    //button "6"'s action
    private void btnSixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSixActionPerformed
        // TODO add your handling code here:
        btnPerfomed("6");
    }//GEN-LAST:event_btnSixActionPerformed

    //button "1"'s actionv
    private void btnOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOneActionPerformed
        // TODO add your handling code here:
        btnPerfomed("1");
    }//GEN-LAST:event_btnOneActionPerformed

    //button "3"'s action
    private void btnThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThreeActionPerformed
        // TODO add your handling code here:
        btnPerfomed("3");
    }//GEN-LAST:event_btnThreeActionPerformed

    //button "/"'s action
    private void btnObelusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObelusActionPerformed
        // TODO add your handling code here:
        btnPerfomed("/");
    }//GEN-LAST:event_btnObelusActionPerformed

    //button "="'s action
    private void btnEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqualsActionPerformed
        // TODO add your handling code here:
        inTextFieldActionPerformed(evt);
    }//GEN-LAST:event_btnEqualsActionPerformed

    //button "."'s action
    private void btnDotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDotActionPerformed
        // TODO add your handling code here:
        btnPerfomed(".");
    }//GEN-LAST:event_btnDotActionPerformed

    //button "0"'s action
    private void btnZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZeroActionPerformed
        btnPerfomed("0");
    }//GEN-LAST:event_btnZeroActionPerformed

    //the action of button "DEL"
    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        try {
            // TODO add your handling code here:
            doc.remove(inTextField.getCaretPosition() - 1, 1); //remove one string from the position of caret
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDelActionPerformed

    //the action of button "AC"
    private void btnAllCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllCActionPerformed
        try {
            // TODO add your handling code here:
            doc.remove(0, doc.getLength()); //remove the content of the doc
            outTextField.setText("0.0"); //set "0.0" as the text
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAllCActionPerformed

    //the action of radio button timesMode
    private void timesModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesModeActionPerformed
        // TODO add your handling code here:
        regex = "[^\\.\\*0-9]"; //set the regex to only accept "*" as operator
        modeValue = "t"; //set the modeValue to choose which way to calculate
        try {
            // TODO add your handling code here:
            doc.remove(0, doc.getLength()); //once the mode is updated, clean the content
            outTextField.setText("0.0"); //set "0.0" as output
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_timesModeActionPerformed

    private void minusModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusModeActionPerformed
        // TODO add your handling code here:
        regex = "[^\\.\\-0-9]"; //set the regex to only accept "-" as operator
        modeValue = "m"; //set the modeValue to choose which way to calculate
        try {
            // TODO add your handling code here:
            doc.remove(0, doc.getLength()); //once the mode is updated, clean the content
            outTextField.setText("0.0"); //set "0.0" as output
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_minusModeActionPerformed

    private void obelusModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obelusModeActionPerformed
        // TODO add your handling code here:
        regex = "[^\\.\\/0-9]"; //set the regex to only accept "/" as operator
        modeValue = "o"; //set the modeValue to choose which way to calculate
        try {
            // TODO add your handling code here:
            doc.remove(0, doc.getLength()); //once the mode is updated, clean the content
            outTextField.setText("0.0"); //set "0.0" as output
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_obelusModeActionPerformed

    private void plusModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusModeActionPerformed
        // TODO add your handling code here:
        regex = "[^\\.\\+0-9]"; //set the regex to only accept "+" as operator
        modeValue = "p"; //set the modeValue to choose which way to calculate
        try {
            // TODO add your handling code here:
            doc.remove(0, doc.getLength()); //once the mode is updated, clean the content
            outTextField.setText("0.0"); //set "0.0" as output
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_plusModeActionPerformed

    //What happen when you press enter in inTextField
    private void inTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inTextFieldActionPerformed
        // TODO add your handling code here:
        outTextField.setText("0.0"); //update the output from the last calculation
        switch (modeValue) { //choose mode and call different methods
            case "p":
                outTextField.setText(plus());
                break;
            case "m":
                outTextField.setText(minus());
                break;
            case "t":
                outTextField.setText(times());
                break;
            case "o":
                outTextField.setText(divides());
                break;
        }
        //System.out.println(outTextField.getCaretPosition());
        //outTextField.setCaretPosition(outTextField.getText().length());
    }//GEN-LAST:event_inTextFieldActionPerformed

    //advanced function button's action
    private void advFunBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advFunBtnActionPerformed
        // TODO add your handling code here:
        mainPanel.setVisible(false); //hide mainPanel
        advancedPanel.setVisible(true); //show advancedPanel
        regex = "[^\\.0-9]"; //set regex to accept only numbers and dot
    }//GEN-LAST:event_advFunBtnActionPerformed

    //what happen when you press enter in the input of square root
    private void inSqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inSqrtActionPerformed
        // TODO add your handling code here:
        sqrtEquals.doClick(); //call sqrtEquals button
    }//GEN-LAST:event_inSqrtActionPerformed

    //calculator's action
    private void simpleCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleCalcActionPerformed
        // TODO add your handling code here:
        advancedPanel.setVisible(false); //hide advancedPanel
        mainPanel.setVisible(true); //show mainPanel
        regex = "[^\\.\\+0-9]"; //set regex to accept "+" as default
    }//GEN-LAST:event_simpleCalcActionPerformed

    //Equals button for absolute value
    private void absEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absEqualsActionPerformed
        // TODO add your handling code here:
        try { //call Math.abs() to get the input's absolute value
            outAbs.setText(Double.toString(Math.abs(Double.valueOf(inAbs.getText()))));
            outAbs.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!inAbs.getText().isEmpty()) { //only if there is any input.
                outAbs.setText("Wrong!");
            }
        }

    }//GEN-LAST:event_absEqualsActionPerformed

    private void sqrtEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtEqualsActionPerformed
        // TODO add your handling code here:
        try { //call Math.sqrt()
            outSqrt.setText(Double.toString(Math.sqrt(Double.valueOf(inSqrt.getText()))));
            outSqrt.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!inSqrt.getText().isEmpty()) { //only if there is any input.
                outAbs.setText("Wrong!");
            }
        }
    }//GEN-LAST:event_sqrtEqualsActionPerformed

    private void cbrtEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbrtEqualsActionPerformed
        // TODO add your handling code here:
        try { //call Math.cbrt()
            outCbrt.setText(Double.toString(Math.cbrt(Double.valueOf(inCbrt.getText()))));
            outCbrt.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!inCbrt.getText().isEmpty()) { //only if there is any input.
                outCbrt.setText("Wrong!");
            }
        }
    }//GEN-LAST:event_cbrtEqualsActionPerformed

    private void powerEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerEqualsActionPerformed
        // TODO add your handling code here:
        try { //call pow()
            outPower.setText(Double.toString(Math.pow(Double.valueOf(inBase.getText()), Double.valueOf(inExponent.getText()))));
            outPower.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!(inBase.getText().isEmpty() || inExponent.getText().isEmpty())) { //only if there is any input.
                outPower.setText("Wrong!");
            }
        }
    }//GEN-LAST:event_powerEqualsActionPerformed

    private void sinEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinEqualsActionPerformed
        // TODO add your handling code here:
        try { //call sin(), because I accept Degree, so I convert it to Radians
            outSin.setText(Double.toString(Math.sin(Math.toRadians(Double.valueOf(inSin.getText())))));
            outSin.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!inSin.getText().isEmpty()) { //only if there is any input.
                outSin.setText("Wrong!");
            }
        }
    }//GEN-LAST:event_sinEqualsActionPerformed

    private void cosEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosEqualsActionPerformed
        // TODO add your handling code here:
        try {
            outCos.setText(Double.toString(Math.cos(Math.toRadians(Double.valueOf(inCos.getText())))));
            outCos.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!inCos.getText().isEmpty()) { //only if there is any input.
                outCos.setText("Wrong!");
            }
        }
    }//GEN-LAST:event_cosEqualsActionPerformed

    private void tanEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanEqualsActionPerformed
        // TODO add your handling code here:
        try { //call tan(), because I accept Degree, so I convert it to Radians
            outTan.setText(Double.toString(Math.tan(Math.toRadians(Double.valueOf(inTan.getText())))));
            outTan.setCaretPosition(0); //set Caret to the front, because sometimes the output is long
        } catch (NumberFormatException nfe) {
            if (!inTan.getText().isEmpty()) { //only if there is any input.
                outTan.setText("Wrong!");
            }
        }
    }//GEN-LAST:event_tanEqualsActionPerformed

    //call button's doClick()
    private void inAbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inAbsActionPerformed
        // TODO add your handling code here:
        absEquals.doClick();
    }//GEN-LAST:event_inAbsActionPerformed

    //call button's doClick()
    private void inCbrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inCbrtActionPerformed
        // TODO add your handling code here:
        cbrtEquals.doClick();
    }//GEN-LAST:event_inCbrtActionPerformed

    //call button's doClick()
    private void inBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inBaseActionPerformed
        // TODO add your handling code here:
        powerEquals.doClick();
    }//GEN-LAST:event_inBaseActionPerformed

    //call button's doClick()
    private void inExponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inExponentActionPerformed
        // TODO add your handling code here:
        powerEquals.doClick();
    }//GEN-LAST:event_inExponentActionPerformed

    //call button's doClick()
    private void inSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inSinActionPerformed
        // TODO add your handling code here:
        sinEquals.doClick();
    }//GEN-LAST:event_inSinActionPerformed

    //call button's doClick()
    private void inCosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inCosActionPerformed
        // TODO add your handling code here:
        cosEquals.doClick();
    }//GEN-LAST:event_inCosActionPerformed

    //call button's doClick()
    private void inTanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inTanActionPerformed
        // TODO add your handling code here:
        tanEquals.doClick();
    }//GEN-LAST:event_inTanActionPerformed

    //This is a method to perfomed the buttons on the buttonPanel
    private void btnPerfomed(String str) {
        try {
            //insert what I pressed to doc            
            doc.insertString(inTextField.getCaretPosition(), str, null);
        } catch (BadLocationException ex) {
            Logger.getLogger(mathMethods.class.getName()).log(Level.SEVERE, null, ex);
        }
        //inTextField.grabFocus();
    }

    //Plus method
    private String plus() {
        String[] numbers;
        double result = 0.0; //initialize result
        if (inTextField.getText().endsWith("+") || inTextField.getText().contains("++")) {
            return "Syntax ERROR!"; //If it ends with "+" or contains any "++"
        } else {
            numbers = inTextField.getText().split("\\+"); //split it by "+" to get the numbers
            for (String s : numbers) {
                if (s.equals("")) { //when there is a "+" in the front like "+1+2+3", the numbers[] = ["", "1","2","3"]
                    s = "0"; //set the first one "0", because a "+" in the front is not Syntax Error as my own calculator
                }
                try { //add them together
                    result += Double.valueOf(s);
                } catch (NumberFormatException nfe) {
                    return "Wrong Number Format!";
                }
            }
        }
        return Double.toString(result); //return the result
    }

    /**
     * The process of calculation: take "3-1-8"(= -6) and "-3-1-8"(= -12) as examples
     * numbers = ["3", "1", "8"] numbers = ["0", "3", "1", "8"]
     * If it is the second situtation, the calculation will be simply result -= each number.
     * If it is the first situtaion, result -= each number; will not work because it will be 0-3-1-8 = -12
     * To get the answer we want, we have to plus 2*(numbers[0]) on it which can be done by result = 2 * numbers[0]
     * 6-3-1-8 = -6
     */
    private String minus() {
        String[] numbers;
        double result = 0.0; //initialize result
        if (inTextField.getText().endsWith("-") || inTextField.getText().contains("--")) {
            return "Syntax ERROR!"; //If it ends with "-" or contains any "--"
        } else {
            numbers = inTextField.getText().split("\\-"); //split it by "-" to get the numbers
            if (numbers[0].equals("")) { //when there is a "-" in the front like "-8-9-10", the numbers[] = ["", "8", "9", "10"]
                numbers[0] = "0"; //set the first one "0"
            } else if (!numbers[0].equals("0")) {
                result = 2 * Double.valueOf(numbers[0]);
            }
            for (String s : numbers) {
                try {
                    result -= Double.valueOf(s);
                } catch (NumberFormatException nfe) {
                    return "Wrong Number Format!";
                }
            }
        }
        return Double.toString(result);
    }
    
    //times methods
    private String times() {
        String[] numbers;
        double result = 1; //initialize result to 1;
        if (inTextField.getText().endsWith("×") || inTextField.getText().contains("××") || inTextField.getText().startsWith("×")) {
            return "Syntax ERROR!"; //If it ends"×" with or contains "××" or starts with "×"
        } else {
            numbers = inTextField.getText().split("\\×");
            for (String s : numbers) {
                try {
                    result *= Double.valueOf(s); //simply time them together
                } catch (NumberFormatException nfe) {
                    return "Wrong Number Format!";
                }
            }
        }
        return Double.toString(result);
    }
    
    /**
     * The process of calculation: take "8/2/2" = 2 as an example.
     * set the result to numbers[0] which is 8
     * Then the process with be 8*(1/2)*(1/2) = 2
     */
    private String divides() {
        String[] numbers;
        double result = 1; //initialize result to 1;
        if (inTextField.getText().endsWith("÷") || inTextField.getText().contains("÷÷") || inTextField.getText().startsWith("÷")) {
            return "Syntax ERROR!"; //If it ends"÷" with or contains "÷÷" or starts with "÷"
        } else {
            numbers = inTextField.getText().split("\\÷");
            result = Double.valueOf(numbers[0]);
            for (int i = 0; i < numbers.length; i++) {
                if (numbers[i].equals("")) {
                    numbers[i] = "1";
                } else if (i != 0) {
                    try {
                        result *= (1 / Double.valueOf(numbers[i]));
                    } catch (NumberFormatException nfe) {
                        return "Wrong Number Format!";
                    }
                }

            }
        }
        return Double.toString(result);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mathMethods.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mathMethods.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mathMethods.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mathMethods.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mathMethods().setVisible(true);
            }
        });
    }
    
    //String regex to switch input mode
    public static String regex = "[^\\.\\+0-9]";
    private String modeValue = "p";
    private myPlainDocument doc = new myPlainDocument(); //new myPlainDocument Object
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton absEquals;
    private javax.swing.JLabel absLabel;
    private javax.swing.JButton advFunBtn;
    private javax.swing.JLabel advLabel;
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JButton btnAllC;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDot;
    private javax.swing.JButton btnEight;
    private javax.swing.JButton btnEquals;
    private javax.swing.JButton btnFive;
    private javax.swing.JButton btnFour;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnNine;
    private javax.swing.JButton btnObelus;
    private javax.swing.JButton btnOne;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnSeven;
    private javax.swing.JButton btnSix;
    private javax.swing.JButton btnThree;
    private javax.swing.JButton btnTimes;
    private javax.swing.JButton btnTwo;
    private javax.swing.JButton btnZero;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel cbrt;
    private javax.swing.JButton cbrtEquals;
    private javax.swing.JLabel cbrtLabel;
    private javax.swing.JLabel cos;
    private javax.swing.JButton cosEquals;
    private javax.swing.JLabel cosLabel;
    private javax.swing.JTextField inAbs;
    private javax.swing.JTextField inBase;
    private javax.swing.JTextField inCbrt;
    private javax.swing.JTextField inCos;
    private javax.swing.JTextField inExponent;
    private javax.swing.JTextField inSin;
    private javax.swing.JTextField inSqrt;
    private javax.swing.JTextField inTan;
    private javax.swing.JTextField inTextField;
    private javax.swing.JLabel leftAbs;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton minusMode;
    public static javax.swing.ButtonGroup modeButtonGroup;
    private javax.swing.JRadioButton obelusMode;
    private javax.swing.JTextField outAbs;
    private javax.swing.JTextField outCbrt;
    private javax.swing.JTextField outCos;
    private javax.swing.JTextField outPower;
    private javax.swing.JTextField outSin;
    private javax.swing.JTextField outSqrt;
    private javax.swing.JTextField outTan;
    private javax.swing.JTextField outTextField;
    private javax.swing.JRadioButton plusMode;
    private javax.swing.JLabel power;
    private javax.swing.JButton powerEquals;
    private javax.swing.JLabel powerLabel;
    private javax.swing.JLabel rightAbs;
    private javax.swing.JButton simpleCalc;
    private javax.swing.JLabel sin;
    private javax.swing.JButton sinEquals;
    private javax.swing.JLabel sinLabel;
    private javax.swing.JLabel sqrt;
    private javax.swing.JButton sqrtEquals;
    private javax.swing.JLabel sqrtLabel;
    private javax.swing.JLabel tan;
    private javax.swing.JButton tanEquals;
    private javax.swing.JLabel tanLabel;
    private javax.swing.JRadioButton timesMode;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
